{
    "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion":"1.0.0.0",
    "parameters":{
        "newStorageAccountName":{
            "type":"string",
            "metadata":{
                "description":"Unique DNS Name for the Storage Account where the Virtual Machine's disks will be placed."
            }
        },
        "adminUsername":{
            "type":"string",
            "metadata":{
                "description":"user name for the Virtual Machine."
            }
        },
        "adminPassword":{
            "type":"string",
            "metadata":{
                "description":"Password for the Virtual Machine."
            }
        },
        "dnsNameForPublicIP":{
            "type":"string",
            "metadata":{
                "description":"Unique DNS Name for the Public IP used to accessthe Virtual Machine."
            }
        },
	"slaveCount":{
		"type":"int",
		"defaultValue":1,
		"metadata":{
			"description":"Number of slave nodes"
		}
	},
        "swarmClusterId":{
            "type":"string",
            "metadata":{
                "description":"Swarm cluster id"
            }
        },
        "nodeCount":{
            "type":"Int",
            "defaultValue":1,
            "metadata":{
                "description":"Number of nodes for autoscale operation."
            }
        }
    },
    "variables":{
        "vmNameSlave":"swarm-node-",
        "vmSizeSlave":"Standard_A3",
        "availabilitySetSlaves":"swarm-nodes-set",
        "osImagePublisher":"CoreOS",
        "osImageOffer":"CoreOS",
        "osImageSKU":"Stable",
        "virtualNetworkName":"swarm-vnet",
        "subnetNameSlave":"subnet-slave",
        "subnetRefSlave":"[concat(resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks',variables('virtualNetworkName')),'/subnets/',variables('subnetNameSlave'))]",
        "storageAccountType":"Standard_LRS",
        "vhdBlobContainer":"vhds",
        "sshKeyPath":"[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
    },
    "resources":[
        {
            "apiVersion":"2015-05-01-preview",
            "type":"Microsoft.Network/networkInterfaces",
            "name":"[concat(variables('vmNameSlave'),copyIndex(), '-nic')]",
            "location":"[resourceGroup().location]",
            "copy":{
                "name":"nicLoop",
                "count":"[parameters('slaveCount')]"
            },
            "properties":{
                "ipConfigurations":[
                    {
                        "name":"ipConfigSlave",
                        "properties":{
                            "privateIPAllocationMethod":"Dynamic",
                            "subnet":{
                                "id":"[variables('subnetRefSlave')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion":"2015-05-01-preview",
            "type":"Microsoft.Compute/virtualMachines",
            "name":"[concat(variables('vmNameSlave'), copyIndex())]",
            "location":"[resourceGroup().location]",
            "copy":{
                "name":"vmLoopSlave",
                "count":"[parameters('slaveCount')]"
            },
            "dependsOn":[
                "[concat('Microsoft.Network/networkInterfaces/', variables('vmNameSlave'), copyIndex(), '-nic')]"
            ],
            "properties":{
                "availabilitySet":{
                    "id":"[resourceId(resourceGroup().name,'Microsoft.Compute/availabilitySets',variables('availabilitySetSlaves'))]"
                },
                "hardwareProfile":{
                    "vmSize":"[variables('vmSizeSlave')]"
                },
                "osProfile":{
                    "computername":"[concat(variables('vmNameSlave'), copyIndex())]",
                    "adminUsername":"[parameters('adminUsername')]",
                    "adminPassword":"[parameters('adminPassword')]"
                },
                "storageProfile":{
                    "imageReference":{
                        "publisher":"[variables('osImagePublisher')]",
                        "offer":"[variables('osImageOffer')]",
                        "sku":"[variables('osImageSKU')]",
                        "version":"latest"
                    },
                    "osDisk":{
                        "name":"[concat(variables('vmNameSlave'), copyIndex(),'-osdisk')]",
                        "vhd":{
                            "uri":"[concat('http://', parameters('newStorageAccountName'), '.blob.core.windows.net/', variables('vhdBlobContainer'), '/slave-', copyIndex(), '-osdisk.vhd')]"
                        },
                        "caching":"ReadWrite",
                        "createOption":"FromImage"
                    }
                },
                "networkProfile":{
                    "networkInterfaces":[
                        {
                            "id":"[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNameSlave'), copyindex(), '-nic'))]"
                        }
                    ]
                }
            }
        },
        {
            "type":"Microsoft.Compute/virtualMachines/extensions",
            "name":"[concat(variables('vmNameSlave'),copyIndex(), '/CustomExtension')]",
            "apiVersion":"2015-05-01-preview",
            "location":"[resourceGroup().location]",
            "copy": {
        			"name": "extLoop",
        			"count": "[parameters('slaveCount')]"
    		    },
            "dependsOn":[
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmNameSlave'), copyIndex())]"
            ],
            "properties":{
                    	"publisher": "Microsoft.OSTCExtensions",
	                "type": "CustomScriptForLinux",
	                "typeHandlerVersion": "1.2",
	                "settings": {
	                    	"fileUris": [
	                        	"https://raw.githubusercontent.com/garimakhulbe/azure-template/master/autoscaletemplate/command.sh"
	                    	],
	                    	"commandToExecute": "sh command.sh"
                	}
            	}
        }
    ]
}
