{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "newStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Storage Account where the Virtual Machine's disks will be placed."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "dnsNameForPublicIP": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "slaveCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of slave nodes"
      }
    }
    }
  },
  "variables": {
    "vmNameMaster": "swarm-master-",
    "vmNameSlave": "swarm-node-",
    "vmSizeMaster": "Standard_A0",
    "vmSizeSlave": "Standard_D1",
    "availabilitySetSlaves": "swarm-nodes-set",
    "osImagePublisher": "Canonical",
    "osImageOffer": "UbuntuServer",
    "ubuntuSKU": "14.10",
    "virtualNetworkName": "swarm-vnet",
    "subnetNameSlave": "subnet-slave",
    "addressPrefixSlave": "192.168.0.0/16",
    "subnetPrefixMaster": "10.0.0.0/24",
    "subnetPrefixSlave": "192.168.0.0/24",
    "subnetRefMaster": "[concat(resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName')),'/subnets/',variables('subnetNameMaster'))]",
    "subnetRefSlave": "[concat(resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName')),'/subnets/',variables('subnetNameSlave'))]",
    "nsgName": "swarm-nsg",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "storageAccountType": "Standard_LRS",
    "vhdBlobContainer": "vhds",
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('newStorageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    }
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetSlaves')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('managementPublicIPAddrName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('nsgID')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefixMaster')]",
            "[variables('addressPrefixSlave')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameMaster')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefixMaster')]",
              "networkSecurityGroup": {
                "id": "[variables('nsgID')]"
              }
            }
          },
          {
            "name": "[variables('subnetNameSlave')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefixSlave')]",
              "networkSecurityGroup": {
                "id": "[variables('nsgID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "swarmManagementEndpoint",
            "properties": {
              "description": "Docker Swarm Manager",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "2376",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "ssh",
            "properties": {
              "description": "SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('vmNameMaster'), copyIndex(), '-ip')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "ipLoopMaster",
        "count": "[parameters('masterCount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmNameMaster'), copyIndex(), '-nic')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopMaster",
        "count": "[parameters('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/',concat(variables('vmNameMaster'), copyIndex(), '-ip'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigMaster",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat('10.0.0.', copyIndex(4))]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('vmNameMaster'), copyIndex(), '-ip'))]"
              },
              "subnet": {
                "id": "[variables('subnetRefMaster')]"
              }
            }
          }
        ]
      }
    }
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmNameSlave'),copyIndex(), '-nic')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopSlave",
        "count": "[parameters('slaveCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigSlave",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRefSlave')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameMaster'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopMaster",
        "count": "[parameters('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNameMaster'), copyIndex(), '-nic')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetMasters'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetMasters'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSizeMaster')]"
        },
        "osProfile": {
          "computername": "[concat(variables('vmNameMaster'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('ubuntuSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', parameters('newStorageAccountName'), '.blob.core.windows.net/', variables('vhdBlobContainer'), '/master-', copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNameMaster'), copyIndex(), '-nic'))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameSlave'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopSlave",
        "count": "[parameters('slaveCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNameSlave'), copyIndex(), '-nic')]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetSlaves'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSizeSlave')]"
        },
        "osProfile": {
          "computername": "[concat(variables('vmNameSlave'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('ubuntuSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', parameters('newStorageAccountName'), '.blob.core.windows.net/', variables('vhdBlobContainer'), '/slave-', copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNameSlave'), copyindex(), '-nic'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameMaster'), copyIndex(), '/DockerExtension')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extLoopMaster",
        "count": "[parameters('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNameMaster'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "DockerExtension",
        "typeHandlerVersion": "1.0",
        "settings": {
                "docker": {
                		"port": "2375"
                	},
        	"compose": {
        		"swarm": {
        			"image": "swarm",
        			"restart": "always",
        			"ports": ["5555:2375"],
        			"command": "[concat('manage token://',parameters('swarmClusterId'))]"
        		}
        	}
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameSlave'), copyIndex(), '/DockerExtension')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extLoopSlave",
        "count": "[parameters('slaveCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNameSlave'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "DockerExtension",
        "typeHandlerVersion": "1.0",
        "settings": {
                "docker": {
                		"port": "2375"
                	},
                	"compose": {
                		"swarm": {
                			"image": "swarm",
                			"restart": "always",
                			"command": "[concat('join --addr=', reference(concat(variables('nicName'), copyIndex())).ipConfigurations[0].properties.privateIPAddress, ':2375 token://',parameters('swarmClusterId'))]"
                		}
                	}
                
        }
      }
    }
  ],
  "outputs": {
    "SwarmManagerEndpoint": {
      "type": "string",
      "value": "[concat('tcp://', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ':2376')]"
    }
  }
}

